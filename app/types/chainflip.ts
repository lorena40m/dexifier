import { chainflipSDK } from '@/lib/utils';

export type DepositAddressResponseV2 = Awaited<ReturnType<typeof chainflipSDK.requestDepositAddressV2>>;

export type Asset = {
  "id": string,
  "direction": string,
  "ticker": string,
  "name": string,
  "network": string,
  "networkLogo": string,
  "assetLogo": string,
  "decimals": number,
  "minimalAmount": number,
  "minimalAmountNative": string,
  "usdPrice": number,
  "usdPriceNative": string,
}

export type Network = {
  "id": string,
  "name": string,
  "logo": string,
}

export type ChainflipSwapRequest = {
  sourceAsset: string,                  // The asset to swap from.
  destinationAsset: string,             // To asset to swap to.
  destinationAddress: string,           // The address on the destination chain to swap to.
  commissionBps?: number,               // An optional override to the charged commission bps.
  boostFee?: number,                    // Maximum accepted boost fee in basis points (100th of a percent).
  minimumPrice?: number                 // Minimum accepted human readable price.
  refundAddress?: string                // Address on the source chain to which the refund will be sent, if the minimum price cannot be met.
  retryDurationInBlocks?: number,       // Number of blocks after which a deposit is refunded if the minimum price cannot be met. One block corresponds to 6 seconds.
  numberOfChunks?: number,              // The number of "sub-swaps" to perform for a DCA swap.
  chunkIntervalBlocks?: number,         // The delay between the "sub-swaps" of a DCA swap in number of blocks.
  affiliate1?: string                   // First optional extra affiliate ss58 address to share commission with.
  affiliate1CommissionBps?: number,     // First optional extra affiliate commission in basis points.
  affiliate2?: string                   // Second optional extra affiliate ss58 address to share commission with.
  affiliate2CommissionBps?: number,     // Second optional extra affiliate commission in basis points.
  affiliate3?: string                   // Second optional extra affiliate commission in basis points.
  affiliate3CommissionBps?: number,     // Third optional extra affiliate commission in basis points.
  affiliate4?: string                   // Fourth optional extra affiliate ss58 address to share commission with.
  affiliate4CommissionBps?: number,     // Fourth optional extra affiliate commission in basis points.
}

export type ChainflipSwapResponse = {
  id: number,
  address: string,
  issuedBlock: number,
  network: string,
  channelId: number,
  sourceExpiryBlock: number,
  explorerUrl: string,
  channelOpeningFee: number,
  channelOpeningFeeNative: string
}

export type ChainflipError = {
  /* A URI reference [RFC3986] that identifies the problem type.
  This specification encourages that, when dereferenced, it provide human-readable 
  documentation for the problem type (e.g., using HTML [W3C.REC-html5-20141028]).
  When this member is not present, its value is assumed to be "about:blank". */
  type: string | null,
  /* A short, human-readable summary of the problem type.
  It SHOULD NOT change from occurrence to occurrence of the problem,
  except for purposes of localization(e.g., using proactive content negotiation; see[RFC7231], Section 3.4). */
  title: string | null,
  /* The HTTP status code([RFC7231], Section 6) generated by the origin server for this occurrence of the problem. */
  status: number | null,
  detail: string | null, //A human - readable explanation specific to this occurrence of the problem.

  instance: string | null, //A URI reference that identifies the specific occurrence of the problem.It may or may not yield further information if dereferenced.

  errors: object, //The validation errors associated with this problem details.
}

interface Fee {
  type: string;
  asset: string;
  amount: number;
  amountNative: string;
}

interface PoolInfo {
  baseAsset: string;
  quoteAsset: string;
  fee: {
    asset: string;
    amount: number;
    amountNative: string;
  };
}

interface EstimatedDurations {
  deposit: number;
  swap: number;
  egress: number;
}

interface BoostQuote {
  ingressAsset: string;
  ingressAmount: number;
  ingressAmountNative: string;
  intermediateAsset: string;
  intermediateAmount: number;
  intermediateAmountNative: string;
  egressAsset: string;
  egressAmount: number;
  egressAmountNative: string;
  includedFees: Fee[];
  lowLiquidityWarning: boolean;
  poolInfo: PoolInfo[];
  estimatedDurationSeconds: number;
  estimatedDurationsSeconds: EstimatedDurations;
  estimatedBoostFeeBps: number;
  chunkIntervalBlocks?: number;
  numberOfChunks?: number;
}

export interface ChainflipQuote {
  type: "regular" | "dca";
  ingressAsset: string;
  ingressAmount: number;
  ingressAmountNative: string;
  intermediateAsset: string;
  intermediateAmount: number;
  intermediateAmountNative: string;
  egressAsset: string;
  egressAmount: number;
  egressAmountNative: string;
  includedFees: Fee[];
  recommendedSlippageTolerancePercent: number;
  lowLiquidityWarning: boolean;
  poolInfo: PoolInfo[];
  estimatedDurationSeconds: number;
  estimatedDurationsSeconds: EstimatedDurations;
  estimatedPrice: number;
  chunkIntervalBlocks?: number;
  numberOfChunks?: number;
  boostQuote: BoostQuote;
}

interface AffiliateBroker {
  account: string;
  commissionBps: number;
}

interface DepositChannel {
  id: string;
  createdAt: number;
  createdAtDate: string;
  brokerCommissionBps: number;
  depositAddress: string;
  sourceChainExpiryBlock: string;
  estimatedExpiryTime: number;
  estimatedExpiryDate: string;
  isExpired: boolean;
  openedThroughBackend: boolean;
  affiliateBrokers: AffiliateBroker[];
}

interface Deposit {
  amountNative: string;
  amount: number;
  witnessedAt: number;
  witnessedAtDate: string;
  witnessedBlockIndex: string;
}

interface RegularSwap {
  inputAmountNative: string;
  inputAmount: number;
  outputAmountNative: string;
  outputAmount: number;
  scheduledAt: number;
  scheduledAtDate: string;
  scheduledBlockIndex: string;
  executedAt: number;
  executedAtDate: string;
  executedBlockIndex: string;
  retryCount: number;
}

interface Swap {
  originalInputAmountNative: string;
  originalInputAmount: number;
  remainingInputAmountNative: string;
  remainingInputAmount: number;
  swappedInputAmountNative: string;
  swappedInputAmount: number;
  swappedIntermediateAmountNative: string;
  swappedIntermediateAmount: number;
  swappedOutputAmountNative: string;
  swappedOutputAmount: number;
  regular: RegularSwap;
}

interface SwapEgress {
  amountNative: string;
  amount: number;
  scheduledAt: number;
  scheduledAtDate: string;
  scheduledBlockIndex: string;
  transactionReference: string;
  witnessedAt: number;
  witnessedBlockIndex: string;
}

export interface ChainflipSwapStatus {
  state: string;
  swapId: string;
  sourceAsset: string;
  destinationAsset: string;
  destinationAddress: string;
  depositChannel: DepositChannel;
  estimatedDurationSeconds: number;
  sourceChainRequiredBlockConfirmations: number;
  fees: Fee[];
  deposit: Deposit;
  swap: Swap;
  swapEgress: SwapEgress;
}
